const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const { body, validationResult } = require('express-validator');
const app = express();
const PORT = process.env.PORT || 5555;

// cho dev local + domain production (ch·ªâ whitelist origin c·∫ßn thi·∫øt)
app.use(cors({ origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'https://songlinh.online'], credentials: true }));
app.use(express.json());

// x·ª≠ l√Ω preflight
app.options('*', cors());
// ...existing code...

// Security Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Qu√° nhi·ªÅu requests t·ª´ IP n√†y, vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.'
});

const postLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutes
  max: 10, // limit each IP to 10 POST requests per 5 minutes
  message: 'Qu√° nhi·ªÅu l·ªùi ch√∫c t·ª´ IP n√†y, vui l√≤ng th·ª≠ l·∫°i sau 5 ph√∫t.'
});

app.use(limiter);
app.use(express.json({ limit: '1mb' })); // Limit JSON payload size

// Serve static images
app.use('/images', express.static(path.join(__dirname, 'public', 'images')));

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u tr·ªØ l·ªùi ch√∫c
const WISHES_FILE = path.join(__dirname, 'data', 'wishes.json');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
const ensureDataDir = async () => {
  const dataDir = path.dirname(WISHES_FILE);
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }
};

// Kh·ªüi t·∫°o file wishes.json n·∫øu ch∆∞a c√≥
const initWishesFile = async () => {
  try {
    await fs.access(WISHES_FILE);
  } catch {
    const initialWishes = [
      {
        name: "M·∫π",
        message: "Ch√†o m·ª´ng hai thi√™n th·∫ßn Phan Tr√∫c Linh v√† Phan H·∫° Linh! üíñ",
        time: "2 gi·ªù tr∆∞·ªõc"
      },
      {
        name: "B·ªë",
        message: "Hai con Phan Tr√∫c Linh v√† Phan H·∫° Linh l√† ni·ªÅm h·∫°nh ph√∫c l·ªõn nh·∫•t c·ªßa b·ªë m·∫π! üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
        time: "1 gi·ªù tr∆∞·ªõc"
      },
      {
        name: "B√† n·ªôi",
        message: "Ch√°u ngoan Phan Tr√∫c Linh v√† Phan H·∫° Linh c·ªßa b√†! ü•∞",
        time: "30 ph√∫t tr∆∞·ªõc"
      }
    ];
    await fs.writeFile(WISHES_FILE, JSON.stringify(initialWishes, null, 2));
  }
};

// API Routes

// L·∫•y danh s√°ch ·∫£nh t·ª´ th∆∞ m·ª•c
app.get('/api/images/:babyName', async (req, res) => {
  try {
    const babyName = req.params.babyName;
    const imageDir = path.join(__dirname, 'public', 'images', babyName);
    
    // Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    try {
      await fs.access(imageDir);
    } catch {
      return res.json([]);
    }
    
    const files = await fs.readdir(imageDir);
    const imageFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);
    });
    
    // S·∫Øp x·∫øp theo t√™n file
    imageFiles.sort();
    
    // T·∫°o URL cho t·ª´ng ·∫£nh (encode t√™n file ƒë·ªÉ x·ª≠ l√Ω d·∫•u c√°ch v√† k√Ω t·ª± ƒë·∫∑c bi·ªát)
    const imageUrls = imageFiles.map(file => `/images/${babyName}/${encodeURIComponent(file)}`);
    
    res.json(imageUrls);
  } catch (error) {
    console.error('Error reading images:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh' });
  }
});

// L·∫•y t·∫•t c·∫£ l·ªùi ch√∫c
app.get('/api/wishes', async (req, res) => {
  try {
    const data = await fs.readFile(WISHES_FILE, 'utf8');
    const wishes = JSON.parse(data);
    res.json(wishes);
  } catch (error) {
    console.error('Error reading wishes:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc l·ªùi ch√∫c' });
  }
});

// Validation middleware
const wishValidation = [
  body('name')
    .trim()
    .isLength({ min: 1, max: 50 })
    .withMessage('T√™n ph·∫£i c√≥ t·ª´ 1-50 k√Ω t·ª±')
    .matches(/^[a-zA-Z√Ä-·ªπ0-9\s.,!?-]+$/)
    .withMessage('T√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† m·ªôt s·ªë k√Ω t·ª± ƒë·∫∑c bi·ªát'),
  body('message')
    .trim()
    .isLength({ min: 1, max: 500 })
    .withMessage('L·ªùi ch√∫c ph·∫£i c√≥ t·ª´ 1-500 k√Ω t·ª±')
    .matches(/^[a-zA-Z√Ä-·ªπ0-9\s.,!?@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/~`\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]+$/u)
    .withMessage('L·ªùi ch√∫c ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá')
];

// Th√™m l·ªùi ch√∫c m·ªõi
app.post('/api/wishes', postLimiter, wishValidation, async (req, res) => {
  try {
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ 
        error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', 
        details: errors.array() 
      });
    }

    const { name, message } = req.body;
    
    // Sanitize input (lo·∫°i b·ªè HTML tags v√† script)
    const sanitizedName = name.replace(/<[^>]*>/g, '').trim();
    const sanitizedMessage = message.replace(/<[^>]*>/g, '').trim();

    const newWish = {
      name: sanitizedName,
      message: sanitizedMessage,
      time: "V·ª´a xong"
    };

    // ƒê·ªçc l·ªùi ch√∫c hi·ªán t·∫°i
    const data = await fs.readFile(WISHES_FILE, 'utf8');
    const wishes = JSON.parse(data);
    
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªùi ch√∫c t·ªëi ƒëa
    if (wishes.length >= 1000) {
      return res.status(429).json({ error: 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªùi ch√∫c' });
    }
    
    // Th√™m l·ªùi ch√∫c m·ªõi v√†o cu·ªëi danh s√°ch
    wishes.push(newWish);
    
    // L∆∞u l·∫°i file
    await fs.writeFile(WISHES_FILE, JSON.stringify(wishes, null, 2));
    
    res.json({ success: true, wish: newWish });
  } catch (error) {
    console.error('Error adding wish:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ th√™m l·ªùi ch√∫c' });
  }
});

// X√≥a l·ªùi ch√∫c (t√πy ch·ªçn)
app.delete('/api/wishes/:index', async (req, res) => {
  try {
    const index = parseInt(req.params.index);
    
    const data = await fs.readFile(WISHES_FILE, 'utf8');
    const wishes = JSON.parse(data);
    
    if (index < 0 || index >= wishes.length) {
      return res.status(400).json({ error: 'L·ªùi ch√∫c kh√¥ng t·ªìn t·∫°i' });
    }
    
    wishes.splice(index, 1);
    await fs.writeFile(WISHES_FILE, JSON.stringify(wishes, null, 2));
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error deleting wish:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a l·ªùi ch√∫c' });
  }
});

// Kh·ªüi ƒë·ªông server
const startServer = async () => {
  await ensureDataDir();
  await initWishesFile();
  
  app.listen(PORT, () => {
    console.log(`üöÄ Backend server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üìù API endpoints:`);
    console.log(`   GET  /api/wishes - L·∫•y t·∫•t c·∫£ l·ªùi ch√∫c`);
    console.log(`   POST /api/wishes - Th√™m l·ªùi ch√∫c m·ªõi`);
    console.log(`   DELETE /api/wishes/:index - X√≥a l·ªùi ch√∫c`);
  });
};

startServer().catch(console.error);
